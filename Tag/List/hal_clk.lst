C51 COMPILER V9.54   HAL_CLK                                                               08/15/2019 15:51:53 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE HAL_CLK
OBJECT MODULE PLACED IN .\Object\hal_clk.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE hal\nrf24le1\hal_clk.c COMPACT OPTIMIZE(4,SPEED) BROWSE INCDIR(hal\nrf24
                    -le1;hal\nrf24l01p;hal;compiler\c51;compiler\common) DEFINE(MCU_NRF24LE1) DEBUG OBJECTEXTEND PRINT(.\List\hal_clk.lst) TA
                    -BS(2) OBJECT(.\Object\hal_clk.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 2513 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of hal_clk
  16           */
  17          
  18          #include "nrf24le1.h"
  19          #include <stdbool.h>
  20          #include "hal_clk.h"
  21          
  22          void hal_clk_regret_xosc16m_on(bool on) {
  23   1          if(on) {
  24   2              CLKCTRL = (CLKCTRL | 0x80U) & (uint8_t)~0x08U;   // & ~0x08 to prevent writing 1 to this bit
  25   2          } else {
  26   2              CLKCTRL = CLKCTRL & (uint8_t)~0x88U;            // & ~0x08 to prevent writing 1 to this bit
  27   2          }
  28   1      }
  29          
  30          void hal_clk_set_input(hal_clk_input_t input) {
  31   1          CLKCTRL = (CLKCTRL & (uint8_t)~0x48U) | ((input & 0x01U) << 6);
  32   1      }
  33          
  34          void hal_clk_set_16m_source(hal_clk_source_t source) {
  35   1          CLKCTRL = (CLKCTRL & (uint8_t)~0x38U) | ((source & 0x03U) << 4);
  36   1      }
  37          
  38          hal_clk_source_t hal_clk_get_16m_source(void) {
  39   1          hal_clk_source_t clock_source;
  40   1          if(CLKLFCTRL & (uint8_t)0x08U) {
  41   2              clock_source = HAL_CLK_XOSC16M;
  42   2          } else {
  43   2              clock_source = HAL_CLK_RCOSC16M;
  44   2          }
  45   1      
  46   1          return clock_source;
  47   1      }
  48          
  49          void hal_clk_set_freq(hal_clk_freq_t freq) {
  50   1          CLKCTRL = ((CLKCTRL & (uint8_t)~0x0FU) | ((uint8_t)freq & 0x07U)); // & ~0x08 to prevent writing 1 to 
             -this bit
  51   1      }
  52          
C51 COMPILER V9.54   HAL_CLK                                                               08/15/2019 15:51:53 PAGE 2   

  53          bool hal_clklf_phase(void) {
  54   1          return (bool)(CLKLFCTRL & 0x80U);
  55   1      }
  56          
  57          bool hal_clklf_ready(void) {
  58   1          return (bool)(CLKLFCTRL & 0x40U);
  59   1      }
  60          
  61          void hal_clklf_set_source(hal_clklf_source_t source) {
  62   1          CLKLFCTRL = (uint8_t)(CLKLFCTRL & (uint8_t)~0x07U) | (uint8_t)((uint8_t)source & (uint8_t)0x07U);
  63   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     98    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
