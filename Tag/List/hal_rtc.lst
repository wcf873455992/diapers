C51 COMPILER V9.54   HAL_RTC                                                               08/15/2019 15:51:53 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE HAL_RTC
OBJECT MODULE PLACED IN .\Object\hal_rtc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE hal\nrf24le1\hal_rtc.c COMPACT OPTIMIZE(4,SPEED) BROWSE INCDIR(hal\nrf24
                    -le1;hal\nrf24l01p;hal;compiler\c51;compiler\common) DEFINE(MCU_NRF24LE1) DEBUG OBJECTEXTEND PRINT(.\List\hal_rtc.lst) TA
                    -BS(2) OBJECT(.\Object\hal_rtc.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 133 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of hal_rtc
  16           */
  17          
  18          #include "nrf24le1.h"
  19          #include "hal_rtc.h"
  20          #include "nordic_common.h"
  21          
  22          void hal_rtc_capture(void) {
  23   1          RTC2CON |= BIT_4;                         // Set "sfrCapture" bit(Trig. sig.)
  24   1      }
  25          
  26          void hal_rtc_radio_capture_enable(bool en) {
  27   1          if(en) {
  28   2              RTC2CON |= BIT_3;                       // Set "enableExtCapture" bit
  29   2          } else {
  30   2              RTC2CON &= ~BIT_3;                      // Clear "enableExtCapture" bit
  31   2          }
  32   1      }
  33          
  34          void hal_rtc_set_compare_mode(hal_rtc_compare_mode_t mode) {
  35   1          RTC2CON = (RTC2CON & 0xF9) | ((mode << 1) & ~0xF9); // Set "compareMode" bits
  36   1      }
  37          
  38          void hal_rtc_start(bool en) {
  39   1          if(en) {
  40   2              RTC2CON |= BIT_0;                       // Set "rtc2Enable" bit
  41   2          } else {
  42   2              RTC2CON &= ~BIT_0;                      // Clear "rtc2Enable" bit
  43   2          }
  44   1      }
  45          
  46          void hal_rtc_set_compare_value(uint16_t value) {
  47   1          uint8_t compare_status;
  48   1          compare_status = (RTC2CON & (BIT_1 | BIT_2)); // Save "compareMode" bits
  49   1          RTC2CON &= ~(BIT_1 | BIT_2);              // Disable compare
  50   1          RTC2CMP0 = LSB(value);                    // Write LSB
  51   1          RTC2CMP1 = MSB(value);                    // Write MSB
  52   1          RTC2CON |= compare_status;                // Update compare status
  53   1      }
C51 COMPILER V9.54   HAL_RTC                                                               08/15/2019 15:51:53 PAGE 2   

  54          
  55          uint16_t hal_rtc_get_compare_value(void) {
  56   1          uint8_t compare_status;
  57   1          uint16_t value;                           // Create temporary output variable
  58   1          compare_status = (RTC2CON & (BIT_1 | BIT_2)); // Save "compareMode" bits
  59   1          RTC2CON &= ~(BIT_1 | BIT_2);              // Disable compare
  60   1          value = RTC2CMP1;                         // Read MSB
  61   1          value <<= 8;                              // Shift to correct position
  62   1          value |= RTC2CMP0;                        // Add LSB
  63   1          RTC2CON |= compare_status;                // Update compare status
  64   1          return value;                             // Return compare value
  65   1      }
  66          
  67          uint16_t hal_rtc_get_capture_value(void) {
  68   1          uint8_t capture_status;
  69   1          uint16_t value;                           // Create temporary output variable
  70   1          capture_status = (RTC2CON & BIT_3);       // Save "compareMode" bits
  71   1          RTC2CON &= ~BIT_3;                        // Disable compare
  72   1          value = RTC2CPT01;                        // Read MSB
  73   1          value <<= 8;                              // Shift to correct position
  74   1          value |= RTC2CPT00;                       // Add LSB
  75   1          RTC2CON |= capture_status;                // Update external capture status
  76   1          return value;                             // Return timer value
  77   1      }
  78          
  79          uint8_t hal_rtc_get_capture_clock_cycles(void) {
  80   1          return RTC2CPT10;                         // Return register
  81   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    127    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
