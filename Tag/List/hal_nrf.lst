C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE HAL_NRF
OBJECT MODULE PLACED IN .\Object\hal_nrf.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE hal\nrf24l01p\hal_nrf.c COMPACT OPTIMIZE(4,SPEED) BROWSE INCDIR(hal\nrf2
                    -4le1;hal\nrf24l01p;hal;compiler\c51;compiler\common) DEFINE(MCU_NRF24LE1) DEBUG OBJECTEXTEND PRINT(.\List\hal_nrf.lst) T
                    -ABS(2) OBJECT(.\Object\hal_nrf.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 2713 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of hal_nrf
  16          */
  17          /*lint -t2 */
  18          /*lint -esym( 534, hal_nrf_write_reg ) */
  19          /*lint -esym( 534, hal_nrf_rw ) */
  20          /*lint -e708 */
  21          /*lint -e46 */
  22          
  23          #include <stdint.h>
  24          #include <stdbool.h>
  25          
  26          #include "nordic_common.h"
  27          #include "hal_nrf.h"
  28          
  29          #define SET_BIT(pos) ((uint8_t) (1U<<( (uint8_t) (pos) )))
  30          #define UINT8(t) ((uint8_t) (t))
  31          
  32          /** Basis function read_reg.
  33           * Use this function to read the contents
  34           * of one radios register.
  35           *
  36           * @param reg Register to read
  37           * @return Register contents
  38          */
  39          uint8_t hal_nrf_read_reg(uint8_t reg);
  40          
  41          /** Basis function write_reg.
  42           * Use this function to write a new value to
  43           * a radio register.
  44           *
  45           * @param reg Register to write
  46           * @param value New value to write
  47           * @return Status register
  48          */
  49          uint8_t hal_nrf_write_reg(uint8_t reg, uint8_t value);
  50          
  51          /** Basis function, read_multibyte register .
  52           * Use this function to read multiple bytes from
  53           * a multibyte radio-register
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 2   

  54           *
  55           * @param reg Multibyte register to read from
  56           * @param *pbuf Pointer to buffer in which to store read bytes to
  57           *
  58           * @return pipe# of received data (MSB), if operation used by a hal_nrf_read_rx_pload
  59           * @return length of read data (LSB), either for hal_nrf_read_rx_pload or
  60           * for hal_nrf_get_address.
  61          */
  62          uint16_t hal_nrf_read_multibyte_reg(uint8_t reg, uint8_t *pbuf);
  63          
  64          /** Basis function, write_multibyte register.
  65           * Use this function to write multiple bytes to
  66           * a multiple radio register.
  67           *
  68           * @param reg Register to write
  69           * @param *pbuf pointer to buffer in which data to write is
  70           * @param length \# of bytes to write
  71          */
  72          void hal_nrf_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length);
  73          
  74          /**
  75           * Typedef for the CONFIG register. Contains all the bitaddressable
  76           * settings in the bits struct and the value sent to the radio in the uint8_t
  77           */
  78          typedef union {
  79              uint8_t value;
  80              struct {
  81                  uint8_t prim_rx : 1;
  82                  uint8_t pwr_up : 1;
  83                  uint8_t crc0 : 1;
  84                  uint8_t en_crc : 1;
  85                  uint8_t mask_max_rt : 1;
  86                  uint8_t mask_tx_ds : 1;
  87                  uint8_t mask_rx_dr : 1;
  88                  const uint8_t : 1;
  89              } bits;
  90          } config_t;
  91          
  92          /**
  93           * Typedef for the EN_AA, EN_RXADDR and DYNPD registers. Contains all the
  94           * bitaddressable settings in the bits struct and the value sent to the radio
  95           * in the uint8_t
  96           */
  97          typedef union {
  98              uint8_t value;
  99              struct {
 100                  uint8_t pipe_0 : 1;
 101                  uint8_t pipe_1 : 1;
 102                  uint8_t pipe_2 : 1;
 103                  uint8_t pipe_3 : 1;
 104                  uint8_t pipe_4 : 1;
 105                  uint8_t pipe_5 : 1;
 106                  const uint8_t : 2;
 107              } bits;
 108          } en_pipes_t;
 109          
 110          /**
 111           * Typedef for the SETUP_AW register. Contains all the bitaddressable
 112           * settings in the bits struct and the value sent to the radio in the uint8_t
 113           */
 114          typedef union {
 115              uint8_t value;
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 3   

 116              struct {
 117                  uint8_t aw : 2;
 118                  const uint8_t : 6;
 119              } bits;
 120          } setup_aw_t;
 121          
 122          /**
 123           * Typedef for the SETUP_RETR register. Contains all the bitaddressable
 124           * settings in the bits struct and the value sent to the radio in the uint8_t
 125           */
 126          typedef union {
 127              uint8_t value;
 128              struct {
 129                  uint8_t arc : 4;
 130                  uint8_t ard : 4;
 131              } bits;
 132          } setup_retr_t;
 133          
 134          /**
 135           * Typedef for the RF_CH register. Contains all the bitaddressable
 136           * settings in the bits struct and the value sent to the radio in the uint8_t
 137           */
 138          typedef union {
 139              uint8_t value;
 140              struct {
 141                  uint8_t rf_ch : 7;
 142                  const uint8_t : 1;
 143              } bits;
 144          } rf_ch_t;
 145          
 146          /**
 147           * Typedef for the RF_SETUP register. Contains all the bitaddressable
 148           * settings in the bits struct and the value sent to the radio in the uint8_t
 149           */
 150          typedef union {
 151              uint8_t value;
 152              struct {
 153                  const uint8_t : 1;
 154                  uint8_t rf_pwr : 2;
 155                  uint8_t rf_dr_high : 1;
 156                  uint8_t pll_lock : 1;
 157                  uint8_t rf_dr_low : 1;
 158                  const uint8_t : 1;
 159                  uint8_t cont_wave : 1;
 160              } bits;
 161          } rf_setup_t;
 162          
 163          /**
 164           * Typedef for the RX_PW_Px registers. Contains all the bitaddressable
 165           * settings in the bits struct and the value sent to the radio in the uint8_t
 166           */
 167          typedef union {
 168              uint8_t value;
 169              struct {
 170                  uint8_t rx_pw : 6;
 171                  const uint8_t : 2;
 172              } bits;
 173          } rx_pw_t;
 174          
 175          /**
 176           * Typedef for the FEATURE register. Contains all the bitaddressable
 177           * settings in the bits struct and the value sent to the radio in the uint8_t
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 4   

 178           */
 179          typedef union {
 180              uint8_t value;
 181              struct {
 182                  uint8_t en_dyn_ack : 1;
 183                  uint8_t en_ack_pay : 1;
 184                  uint8_t en_dpl : 1;
 185                  const uint8_t : 5;
 186              } bits;
 187          } feature_t;
 188          
 189          void hal_nrf_set_operation_mode(hal_nrf_operation_mode_t op_mode) {
 190   1          config_t config;
 191   1          config.value = hal_nrf_read_reg (CONFIG);
 192   1      
 193   1          if(op_mode == HAL_NRF_PRX) {
 194   2              config.bits.prim_rx = 1U;
 195   2          } else {
 196   2              config.bits.prim_rx = 0U;
 197   2          }
 198   1      
 199   1          hal_nrf_write_reg (CONFIG, config.value);
 200   1      }
 201          
 202          void hal_nrf_set_power_mode(hal_nrf_pwr_mode_t pwr_mode) {
 203   1          config_t config;
 204   1          config.value = hal_nrf_read_reg (CONFIG);
 205   1      
 206   1          if(pwr_mode == HAL_NRF_PWR_UP) {
 207   2              config.bits.pwr_up = 1U;
 208   2          } else {
 209   2              config.bits.pwr_up = 0U;
 210   2          }
 211   1      
 212   1          hal_nrf_write_reg (CONFIG, config.value);
 213   1      }
 214          
 215          void hal_nrf_set_crc_mode(hal_nrf_crc_mode_t crc_mode) {
 216   1          config_t config;
 217   1          config.value = hal_nrf_read_reg (CONFIG);
 218   1      
 219   1          switch (crc_mode) {
 220   2          case HAL_NRF_CRC_OFF:
 221   2              config.bits.en_crc = 0U;
 222   2              break;
 223   2          case HAL_NRF_CRC_8BIT:
 224   2              config.bits.en_crc = 1U;
 225   2              config.bits.crc0 = 0U;
 226   2              break;
 227   2          case HAL_NRF_CRC_16BIT:
 228   2              config.bits.en_crc = 1U;
 229   2              config.bits.crc0 = 1U;
 230   2              break;
 231   2          default:
 232   2              break;
 233   2          }
 234   1      
 235   1          hal_nrf_write_reg (CONFIG, config.value);
 236   1      }
 237          
 238          void hal_nrf_set_irq_mode(hal_nrf_irq_source_t int_source, bool irq_state) {
 239   1          config_t config;
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 5   

 240   1          config.value = hal_nrf_read_reg (CONFIG);
 241   1      
 242   1          switch (int_source) {
 243   2          case HAL_NRF_MAX_RT:
 244   2              config.bits.mask_max_rt = irq_state ? 0U : 1U;
 245   2              break;
 246   2          case HAL_NRF_TX_DS:
 247   2              config.bits.mask_tx_ds = irq_state ? 0U : 1U;
 248   2              break;
 249   2          case HAL_NRF_RX_DR:
 250   2              config.bits.mask_rx_dr = irq_state ? 0U : 1U;
 251   2              break;
 252   2          }
 253   1      
 254   1          hal_nrf_write_reg (CONFIG, config.value);
 255   1      }
 256          
 257          uint8_t hal_nrf_get_clear_irq_flags(void) {
 258   1          uint8_t retval;
 259   1      
 260   1          retval = hal_nrf_write_reg (STATUS, (BIT_6 | BIT_5 | BIT_4));
 261   1      
 262   1          return (retval & (BIT_6 | BIT_5 | BIT_4));
 263   1      }
 264          
 265          uint8_t hal_nrf_clear_irq_flags_get_status(void) {
 266   1          uint8_t retval;
 267   1      
 268   1          // When RFIRQ is cleared (when calling write_reg), pipe information is unreliable (read again with rea
             -d_reg)
 269   1          retval = hal_nrf_write_reg (STATUS, (BIT_6 | BIT_5 | BIT_4)) & (BIT_6 | BIT_5 | BIT_4);
 270   1          retval |= hal_nrf_read_reg (STATUS) & (BIT_3 | BIT_2 | BIT_1 | BIT_0);
 271   1      
 272   1          return (retval);
 273   1      }
 274          
 275          
 276          void hal_nrf_clear_irq_flag(hal_nrf_irq_source_t int_source) {
 277   1          hal_nrf_write_reg (STATUS, SET_BIT(int_source));
 278   1      }
 279          
 280          uint8_t hal_nrf_get_irq_flags(void) {
 281   1          return hal_nrf_nop() & (BIT_6 | BIT_5 | BIT_4);
 282   1      }
 283          
 284          void hal_nrf_open_pipe(hal_nrf_address_t pipe_num, bool auto_ack) {
 285   1          en_pipes_t en_rxaddr;
 286   1          en_pipes_t en_aa;
 287   1          en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 288   1          en_aa.value = hal_nrf_read_reg (EN_AA);
 289   1      
 290   1          switch(pipe_num) {
 291   2          case HAL_NRF_PIPE0:
 292   2          case HAL_NRF_PIPE1:
 293   2          case HAL_NRF_PIPE2:
 294   2          case HAL_NRF_PIPE3:
 295   2          case HAL_NRF_PIPE4:
 296   2          case HAL_NRF_PIPE5:
 297   2              en_rxaddr.value = en_rxaddr.value | SET_BIT(pipe_num);
 298   2      
 299   2              if(auto_ack) {
 300   3                  en_aa.value = en_aa.value | SET_BIT(pipe_num);
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 6   

 301   3              } else {
 302   3                  en_aa.value = en_aa.value & (uint8_t)~SET_BIT(pipe_num);
 303   3              }
 304   2              break;
 305   2      
 306   2          case HAL_NRF_ALL:
 307   2              en_rxaddr.value = (uint8_t)(~(BIT_6 | BIT_7));
 308   2      
 309   2              if(auto_ack) {
 310   3                  en_aa.value = (uint8_t)(~(BIT_6 | BIT_7));
 311   3              } else {
 312   3                  en_aa.value = 0U;
 313   3              }
 314   2              break;
 315   2      
 316   2          case HAL_NRF_TX:
 317   2          default:
 318   2              break;
 319   2          }
 320   1      
 321   1          hal_nrf_write_reg (EN_RXADDR, en_rxaddr.value);
 322   1          hal_nrf_write_reg (EN_AA, en_aa.value);
 323   1      }
 324          
 325          void hal_nrf_close_pipe(hal_nrf_address_t pipe_num) {
 326   1          en_pipes_t en_rxaddr;
 327   1          en_pipes_t en_aa;
 328   1          en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 329   1          en_aa.value = hal_nrf_read_reg (EN_AA);
 330   1      
 331   1          switch(pipe_num) {
 332   2          case HAL_NRF_PIPE0:
 333   2          case HAL_NRF_PIPE1:
 334   2          case HAL_NRF_PIPE2:
 335   2          case HAL_NRF_PIPE3:
 336   2          case HAL_NRF_PIPE4:
 337   2          case HAL_NRF_PIPE5:
 338   2              en_rxaddr.value = en_rxaddr.value & (uint8_t)~SET_BIT(pipe_num);
 339   2              en_aa.value = en_aa.value & (uint8_t)~SET_BIT(pipe_num);
 340   2              break;
 341   2      
 342   2          case HAL_NRF_ALL:
 343   2              en_rxaddr.value = 0U;
 344   2              en_aa.value = 0U;
 345   2              break;
 346   2      
 347   2          case HAL_NRF_TX:
 348   2          default:
 349   2              break;
 350   2          }
 351   1      
 352   1          hal_nrf_write_reg (EN_RXADDR, en_rxaddr.value);
 353   1          hal_nrf_write_reg (EN_AA, en_aa.value);
 354   1      }
 355          
 356          void hal_nrf_set_address(const hal_nrf_address_t address, const uint8_t *addr) {
 357   1          switch(address) {
 358   2          case HAL_NRF_TX:
 359   2          case HAL_NRF_PIPE0:
 360   2          case HAL_NRF_PIPE1:
 361   2              hal_nrf_write_multibyte_reg(W_REGISTER + RX_ADDR_P0 + (uint8_t) address, addr, hal_nrf_get_address
             -_width());
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 7   

 362   2              break;
 363   2          case HAL_NRF_PIPE2:
 364   2          case HAL_NRF_PIPE3:
 365   2          case HAL_NRF_PIPE4:
 366   2          case HAL_NRF_PIPE5:
 367   2              hal_nrf_write_reg (RX_ADDR_P0 + (uint8_t) address, *addr);
 368   2              break;
 369   2      
 370   2          case HAL_NRF_ALL:
 371   2          default:
 372   2              break;
 373   2          }
 374   1      }
 375          
 376          uint8_t hal_nrf_get_address(uint8_t address, uint8_t *addr) {
 377   1          switch (address) {
 378   2          case HAL_NRF_PIPE0:
 379   2          case HAL_NRF_PIPE1:
 380   2          case HAL_NRF_TX:
 381   2              return (uint8_t)hal_nrf_read_multibyte_reg (address, addr);
 382   2          default:
 383   2              *addr = hal_nrf_read_reg(RX_ADDR_P0 + address);
 384   2              return 1U;
 385   2          }
 386   1      }
 387          
 388          void hal_nrf_set_auto_retr(uint8_t retr, uint16_t delay) {
 389   1          setup_retr_t setup_retr;
 390   1          setup_retr.bits.ard = (uint8_t)(delay >> 8);
 391   1          setup_retr.bits.arc = retr;
 392   1      
 393   1          hal_nrf_write_reg (SETUP_RETR, setup_retr.value);
 394   1      }
 395          
 396          void hal_nrf_set_address_width(hal_nrf_address_width_t address_width) {
 397   1          setup_aw_t setup_aw;
 398   1          setup_aw.value = 0U;
 399   1          setup_aw.bits.aw = (uint8_t)address_width - 2U;
 400   1      
 401   1          hal_nrf_write_reg (SETUP_AW, setup_aw.value);
 402   1      }
 403          
 404          uint8_t hal_nrf_get_address_width (void) {
 405   1          return hal_nrf_read_reg (SETUP_AW) + 2U;
 406   1      }
 407          
 408          void hal_nrf_set_rx_payload_width(uint8_t pipe_num, uint8_t pload_width) {
 409   1          hal_nrf_write_reg (RX_PW_P0 + pipe_num, pload_width);
 410   1      }
 411          
 412          uint8_t hal_nrf_get_pipe_status(uint8_t pipe_num) {
 413   1          en_pipes_t en_rxaddr;
 414   1          en_pipes_t en_aa;
 415   1          uint8_t en_rx_r, en_aa_r;
 416   1      
 417   1          en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
 418   1          en_aa.value = hal_nrf_read_reg (EN_AA);
 419   1      
 420   1          switch (pipe_num) {
 421   2          case 0:
 422   2              en_rx_r = en_rxaddr.bits.pipe_0;
 423   2              en_aa_r = en_aa.bits.pipe_0;
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 8   

 424   2              break;
 425   2          case 1:
 426   2              en_rx_r = en_rxaddr.bits.pipe_1;
 427   2              en_aa_r = en_aa.bits.pipe_1;
 428   2              break;
 429   2          case 2:
 430   2              en_rx_r = en_rxaddr.bits.pipe_2;
 431   2              en_aa_r = en_aa.bits.pipe_2;
 432   2              break;
 433   2          case 3:
 434   2              en_rx_r = en_rxaddr.bits.pipe_3;
 435   2              en_aa_r = en_aa.bits.pipe_3;
 436   2              break;
 437   2          case 4:
 438   2              en_rx_r = en_rxaddr.bits.pipe_4;
 439   2              en_aa_r = en_aa.bits.pipe_4;
 440   2              break;
 441   2          case 5:
 442   2              en_rx_r = en_rxaddr.bits.pipe_5;
 443   2              en_aa_r = en_aa.bits.pipe_5;
 444   2              break;
 445   2          default:
 446   2              en_rx_r = 0U;
 447   2              en_aa_r = 0U;
 448   2              break;
 449   2          }
 450   1      
 451   1          return (uint8_t)(en_aa_r << 1) + en_rx_r;
 452   1      }
 453          
 454          uint8_t hal_nrf_get_auto_retr_status(void) {
 455   1          return hal_nrf_read_reg(OBSERVE_TX);
 456   1      }
 457          
 458          uint8_t hal_nrf_get_packet_lost_ctr(void) {
 459   1          return ((hal_nrf_read_reg(OBSERVE_TX) & (BIT_7 | BIT_6 | BIT_5 | BIT_4)) >> 4);
 460   1      }
 461          
 462          uint8_t hal_nrf_get_rx_payload_width(uint8_t pipe_num) {
 463   1          uint8_t pw;
 464   1      
 465   1          switch (pipe_num) {
 466   2          case 0:
 467   2              pw = hal_nrf_read_reg (RX_PW_P0);
 468   2              break;
 469   2          case 1:
 470   2              pw = hal_nrf_read_reg (RX_PW_P1);
 471   2              break;
 472   2          case 2:
 473   2              pw = hal_nrf_read_reg (RX_PW_P2);
 474   2              break;
 475   2          case 3:
 476   2              pw = hal_nrf_read_reg (RX_PW_P3);
 477   2              break;
 478   2          case 4:
 479   2              pw = hal_nrf_read_reg (RX_PW_P4);
 480   2              break;
 481   2          case 5:
 482   2              pw = hal_nrf_read_reg (RX_PW_P5);
 483   2              break;
 484   2          default:
 485   2              pw = 0U;
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 9   

 486   2              break;
 487   2          }
 488   1      
 489   1          return pw;
 490   1      }
 491          
 492          void hal_nrf_set_rf_channel(uint8_t channel) {
 493   1          rf_ch_t rf_ch;
 494   1          rf_ch.value = 0U;
 495   1          rf_ch.bits.rf_ch = channel;
 496   1          hal_nrf_write_reg (RF_CH, rf_ch.value);
 497   1      }
 498          
 499          void hal_nrf_set_output_power(hal_nrf_output_power_t power) {
 500   1          rf_setup_t rf_setup;
 501   1          rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 502   1      
 503   1          rf_setup.bits.rf_pwr = (uint8_t)power;
 504   1      
 505   1          hal_nrf_write_reg (RF_SETUP, rf_setup.value);
 506   1      }
 507          
 508          void hal_nrf_set_datarate(hal_nrf_datarate_t datarate) {
 509   1          rf_setup_t rf_setup;
 510   1          rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 511   1      
 512   1          switch (datarate) {
 513   2          case HAL_NRF_250KBPS:
 514   2              rf_setup.bits.rf_dr_low = 1U;
 515   2              rf_setup.bits.rf_dr_high = 0U;
 516   2              break;
 517   2          case HAL_NRF_1MBPS:
 518   2              rf_setup.bits.rf_dr_low = 0U;
 519   2              rf_setup.bits.rf_dr_high = 0U;
 520   2              break;
 521   2          case HAL_NRF_2MBPS:
 522   2          default:
 523   2              rf_setup.bits.rf_dr_low = 0U;
 524   2              rf_setup.bits.rf_dr_high = 1U;
 525   2              break;
 526   2          }
 527   1      
 528   1          hal_nrf_write_reg (RF_SETUP, rf_setup.value);
 529   1      }
 530          
 531          bool hal_nrf_rx_fifo_empty(void) {
 532   1          return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> RX_EMPTY) & 0x01U);
 533   1      }
 534          
 535          bool hal_nrf_rx_fifo_full(void) {
 536   1          return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> RX_FULL) & 0x01U);
 537   1      }
 538          
 539          bool hal_nrf_tx_fifo_empty(void) {
 540   1          return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> TX_EMPTY) & 0x01U);
 541   1      }
 542          
 543          bool hal_nrf_tx_fifo_full(void) {
 544   1          return (bool)((hal_nrf_read_reg(FIFO_STATUS) >> TX_FIFO_FULL) & 0x01U);
 545   1      }
 546          
 547          uint8_t hal_nrf_get_tx_fifo_status(void) {
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 10  

 548   1          return ((hal_nrf_read_reg(FIFO_STATUS) & ((1U << TX_FIFO_FULL) | (1U << TX_EMPTY))) >> 4);
 549   1      }
 550          
 551          uint8_t hal_nrf_get_rx_fifo_status(void) {
 552   1          return (hal_nrf_read_reg(FIFO_STATUS) & ((1U << RX_FULL) | (1U << RX_EMPTY)));
 553   1      }
 554          
 555          uint8_t hal_nrf_get_fifo_status(void) {
 556   1          return hal_nrf_read_reg(FIFO_STATUS);
 557   1      }
 558          
 559          uint8_t hal_nrf_get_transmit_attempts(void) {
 560   1          return (hal_nrf_read_reg(OBSERVE_TX) & (BIT_3 | BIT_2 | BIT_1 | BIT_0));
 561   1      }
 562          
 563          bool hal_nrf_get_carrier_detect(void) {
 564   1          return (bool)(hal_nrf_read_reg(CD) & 0x01U);
 565   1      }
 566          
 567          void hal_nrf_activate_features(void) {
 568   1          return;
 569   1      }
 570          
 571          void hal_nrf_setup_dynamic_payload (uint8_t setup) {
 572   1          en_pipes_t dynpd;
 573   1          dynpd.value = setup & (uint8_t)~0xC0U;
 574   1      
 575   1          hal_nrf_write_reg (DYNPD, dynpd.value);
 576   1      }
 577          
 578          void hal_nrf_enable_dynamic_payload(bool enable) {
 579   1          feature_t feature;
 580   1          feature.value = hal_nrf_read_reg (FEATURE);
 581   1          feature.bits.en_dpl = (enable) ? 1U : 0U;
 582   1      
 583   1          hal_nrf_write_reg (FEATURE, feature.value);
 584   1      }
 585          
 586          void hal_nrf_enable_ack_payload(bool enable) {
 587   1          feature_t feature;
 588   1          feature.value = hal_nrf_read_reg (FEATURE);
 589   1          feature.bits.en_ack_pay = (enable) ? 1U : 0U;
 590   1      
 591   1          hal_nrf_write_reg (FEATURE, feature.value);
 592   1      }
 593          
 594          void hal_nrf_enable_dynamic_ack(bool enable) {
 595   1          feature_t feature;
 596   1          feature.value = hal_nrf_read_reg (FEATURE);
 597   1          feature.bits.en_dyn_ack = (enable) ? 1U : 0U;
 598   1      
 599   1          hal_nrf_write_reg (FEATURE, feature.value);
 600   1      }
 601          
 602          void hal_nrf_write_tx_payload(const uint8_t *tx_pload, uint8_t length) {
 603   1          hal_nrf_write_multibyte_reg(W_TX_PAYLOAD, tx_pload, length);
 604   1      }
 605          
 606          void hal_nrf_write_tx_payload_noack(const uint8_t *tx_pload, uint8_t length) {
 607   1          hal_nrf_write_multibyte_reg(W_TX_PAYLOAD_NOACK, tx_pload, length);
 608   1      }
 609          
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 11  

 610          void hal_nrf_write_ack_payload(uint8_t pipe, const uint8_t *tx_pload, uint8_t length) {
 611   1          hal_nrf_write_multibyte_reg(W_ACK_PAYLOAD | pipe, tx_pload, length);
 612   1      }
 613          
 614          uint8_t hal_nrf_read_rx_payload_width(void) {
 615   1          return hal_nrf_read_reg(R_RX_PL_WID);
 616   1      }
 617          
 618          uint16_t hal_nrf_read_rx_payload(uint8_t *rx_pload) {
 619   1          return hal_nrf_read_multibyte_reg(UINT8(HAL_NRF_RX_PLOAD), rx_pload);
 620   1      }
 621          
 622          uint8_t hal_nrf_get_rx_data_source(void) {
 623   1          return ((hal_nrf_nop() & (BIT_3 | BIT_2 | BIT_1)) >> 1);
 624   1      }
 625          
 626          void hal_nrf_reuse_tx(void) {
 627   1          CSN_LOW();
 628   1          hal_nrf_rw(REUSE_TX_PL);
 629   1          CSN_HIGH();
 630   1      }
 631          
 632          bool hal_nrf_get_reuse_tx_status(void) {
 633   1          return (bool)((hal_nrf_get_fifo_status() & (1U << TX_REUSE)) >> TX_REUSE);
 634   1      }
 635          
 636          void hal_nrf_flush_rx(void) {
 637   1          CSN_LOW();
 638   1          hal_nrf_rw(FLUSH_RX);
 639   1          CSN_HIGH();
 640   1      }
 641          
 642          void hal_nrf_flush_tx(void) {
 643   1          CSN_LOW();
 644   1          hal_nrf_rw(FLUSH_TX);
 645   1          CSN_HIGH();
 646   1      }
 647          
 648          uint8_t hal_nrf_nop(void) {
 649   1          uint8_t retval;
 650   1      
 651   1          CSN_LOW();
 652   1          retval = hal_nrf_rw(NOP);
 653   1          CSN_HIGH();
 654   1      
 655   1          return retval;
 656   1      }
 657          
 658          void hal_nrf_set_pll_mode(bool pll_lock) {
 659   1          rf_setup_t rf_setup;
 660   1          rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 661   1          rf_setup.bits.pll_lock = (pll_lock) ? 1U : 0U;
 662   1      
 663   1          hal_nrf_write_reg(RF_SETUP, rf_setup.value);
 664   1      }
 665          
 666          void hal_nrf_enable_continious_wave (bool enable) {
 667   1          rf_setup_t rf_setup;
 668   1          rf_setup.value = hal_nrf_read_reg (RF_SETUP);
 669   1          rf_setup.bits.cont_wave = (enable ? 1U : 0U);
 670   1      
 671   1          hal_nrf_write_reg(RF_SETUP, rf_setup.value);
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 12  

 672   1      }
 673          
 674          uint8_t hal_nrf_read_reg(uint8_t reg) {
 675   1          uint8_t temp;
 676   1      
 677   1          CSN_LOW();
 678   1      
 679   1          HAL_NRF_HW_SPI_WRITE(reg);
 680   1          while(HAL_NRF_HW_SPI_BUSY) {}
 681   1          temp = HAL_NRF_HW_SPI_READ();
 682   1      
 683   1          HAL_NRF_HW_SPI_WRITE(0U);
 684   1          while(HAL_NRF_HW_SPI_BUSY) {}
 685   1          temp = HAL_NRF_HW_SPI_READ();
 686   1      
 687   1          CSN_HIGH();
 688   1      
 689   1          return temp;
 690   1      }
 691          
 692          uint8_t hal_nrf_write_reg(uint8_t reg, uint8_t value) {
 693   1          uint8_t retval;
 694   1          /*lint -esym(550,dummy) symbol not accessed*/
 695   1          /*lint -esym(438,dummy) last assigned value not used*/
 696   1          /*lint -esym(838,dummy) previously assigned value not used*/
 697   1          uint8_t volatile dummy;
 698   1      
 699   1          CSN_LOW();
 700   1      
 701   1          HAL_NRF_HW_SPI_WRITE((W_REGISTER + reg));
 702   1          while(HAL_NRF_HW_SPI_BUSY) {}
 703   1          retval = HAL_NRF_HW_SPI_READ();
 704   1      
 705   1          HAL_NRF_HW_SPI_WRITE(value);
 706   1          while(HAL_NRF_HW_SPI_BUSY) {}
 707   1          dummy = HAL_NRF_HW_SPI_READ();
 708   1      
 709   1          CSN_HIGH();
 710   1      
 711   1          return retval;
 712   1      }
 713          
 714          #define NRF_READ_MULTIBYTE_REG_COMMON_BODY \
 715              do \
 716              { \
 717                HAL_NRF_HW_SPI_WRITE(0U); \
 718                if (!first_round) \
 719                { \
 720                  *buf = read_byte; \
 721                  buf++; \
 722                } \
 723                else \
 724                { \
 725                  first_round = false; \
 726                } \
 727                /* wait for byte transfer finished */ \
 728                while(HAL_NRF_HW_SPI_BUSY){} \
 729                read_byte = HAL_NRF_HW_SPI_READ(); \
 730              } while (--ctr); \
 731              *buf = read_byte;
 732          
 733          uint16_t hal_nrf_read_multibyte_reg(uint8_t reg, uint8_t *pbuf) {
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 13  

 734   1          uint8_t ctr, length;
 735   1          uint8_t memtype;
 736   1          uint8_t read_byte; /*lint -esym(530,read_byte) symbol not initialized*/
 737   1          bool first_round;
 738   1          first_round = true;
 739   1      
 740   1          memtype = *(uint8_t *)(&pbuf);
 741   1      
 742   1          switch(reg) {
 743   2          case HAL_NRF_PIPE0:
 744   2          case HAL_NRF_PIPE1:
 745   2          case HAL_NRF_TX:
 746   2              length = ctr = hal_nrf_get_address_width();
 747   2              CSN_LOW();
 748   2              hal_nrf_rw(RX_ADDR_P0 + reg);
 749   2              break;
 750   2      
 751   2          case HAL_NRF_RX_PLOAD:
 752   2              reg = hal_nrf_get_rx_data_source();
 753   2              if (reg < 7U) {
 754   3                  length = ctr = hal_nrf_read_rx_payload_width();
 755   3                  CSN_LOW();
 756   3                  hal_nrf_rw(R_RX_PAYLOAD);
 757   3              } else {
 758   3                  ctr = length = 0U;
 759   3              }
 760   2              break;
 761   2      
 762   2          default:
 763   2              ctr = length = 0U;
 764   2              break;
 765   2          }
 766   1      
 767   1          if (memtype == 0x00U) {
 768   2              uint8_t data *buf = (uint8_t data *)pbuf;
 769   2              NRF_READ_MULTIBYTE_REG_COMMON_BODY
 770   2          } else if (memtype == 0x01U) {
 771   2              uint8_t xdata *buf = (uint8_t xdata *)pbuf;
 772   2              NRF_READ_MULTIBYTE_REG_COMMON_BODY
 773   2          } else if (memtype == 0xFEU) {
 774   2              uint8_t pdata *buf = (uint8_t pdata *)pbuf;
 775   2              NRF_READ_MULTIBYTE_REG_COMMON_BODY
 776   2          } else {
 777   2              uint8_t *buf = (uint8_t *)pbuf;
 778   2              NRF_READ_MULTIBYTE_REG_COMMON_BODY
 779   2          }
 780   1      
 781   1          CSN_HIGH();
 782   1      
 783   1          return (((uint16_t) reg << 8) | length);
 784   1      }
 785          
 786          #define NRF_WRITE_MULTIBYTE_REG_COMMON_BODY \
 787            do \
 788            { \
 789              next = *buf; \
 790              buf++; \
 791              while(HAL_NRF_HW_SPI_BUSY) {}  /* wait for byte transfer finished */ \
 792              dummy = HAL_NRF_HW_SPI_READ(); \
 793              HAL_NRF_HW_SPI_WRITE(next); \
 794            } while (--length);
 795          /*lint -esym(550,dummy) symbol not accessed*/ \
C51 COMPILER V9.54   HAL_NRF                                                               08/13/2019 14:54:28 PAGE 14  

 796   1      /*lint -esym(438,dummy) last assigned value not used*/ \
 797   1      /*lint -esym(838,dummy) previously assigned value not used*/ \
 798   1      void hal_nrf_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length) {
 799   1          uint8_t memtype;
 800   1          uint8_t next;
 801   1          uint8_t volatile dummy;
 802   1      
 803   1          memtype = *(uint8_t *)(&pbuf);
 804   1      
 805   1          CSN_LOW();
 806   1          HAL_NRF_HW_SPI_WRITE(reg);
 807   1      
 808   1          if (memtype == 0x00U) {
 809   2              const uint8_t data *buf = (const uint8_t data *)pbuf;
 810   2              NRF_WRITE_MULTIBYTE_REG_COMMON_BODY
 811   2          } else if (memtype == 0x01U) {
 812   2              const uint8_t xdata *buf = (const uint8_t xdata *)pbuf;
 813   2              NRF_WRITE_MULTIBYTE_REG_COMMON_BODY
 814   2          } else if (memtype == 0xFEU) {
 815   2              const uint8_t pdata *buf = (const uint8_t pdata *)pbuf;
 816   2              NRF_WRITE_MULTIBYTE_REG_COMMON_BODY
 817   2          } else {
 818   2              const uint8_t *buf = (const uint8_t *)pbuf;
 819   2              NRF_WRITE_MULTIBYTE_REG_COMMON_BODY
 820   2          }
 821   1      
 822   1          while(HAL_NRF_HW_SPI_BUSY) {} /* wait for byte transfer finished */
 823   1          dummy = HAL_NRF_HW_SPI_READ();
 824   1          CSN_HIGH();
 825   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2523    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      76
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
