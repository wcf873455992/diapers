C51 COMPILER V9.52.0.0   HAL_UART                                                          08/09/2019 21:23:34 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE HAL_UART
OBJECT MODULE PLACED IN .\Object\hal_uart.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE hal\nrf24le1\hal_uart.c OPTIMIZE(2,SPEED) BROWSE INCDIR(hal\nrf24le1;hal\nr
                    -f24l01p;hal;compiler\c51;compiler\common) DEFINE(MCU_NRF24LE1) DEBUG OBJECTEXTEND PRINT(.\List\hal_uart.lst) OBJECT(.\Ob
                    -ject\hal_uart.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 133 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of hal_uart
  16           */
  17          
  18          //lint -e788
  19          //lint -e714
  20          
  21          #include "nrf24le1.h"
  22          #include <stdint.h>
  23          #include <stdbool.h>
  24          #include "hal_uart.h"
  25          
  26          #ifndef UART_NBUF
  27          #define UART_NBUF   32
  28          #endif
  29          
  30          #define BAUD_57K6   1015  // = Round(1024 - (2*16e6)/(64*57600))
  31          #define BAUD_38K4   1011  // = Round(1024 - (2*16e6)/(64*38400))
  32          #define BAUD_19K2    998  // = Round(1024 - (2*16e6)/(64*19200))
  33          #define BAUD_9K6     972  // = Round(1024 - (2*16e6)/(64*9600))
  34          
  35          static uint8_t uart_tx_wp, uart_tx_rp, uart_tx_cnt;
  36          static uint8_t idata uart_tx[UART_NBUF];
  37          
  38          static uint8_t uart_rx_wp, uart_rx_rp, uart_rx_cnt;
  39          static uint8_t idata uart_rx[UART_NBUF];
  40          
  41          UART0_ISR() {
  42   1          if (RI0 == 1) {
  43   2              RI0 = 0;
  44   2              if (uart_rx_cnt < UART_NBUF) {
  45   3                  uart_rx[uart_rx_wp] = S0BUF;
  46   3                  uart_rx_wp = (uart_rx_wp + 1) % UART_NBUF;
  47   3                  uart_rx_cnt++;
  48   3              }
  49   2          }
  50   1          if (TI0 == 1) {
  51   2              TI0 = 0;
  52   2              if (uart_tx_cnt > 1) {
  53   3                  S0BUF = uart_tx[uart_tx_rp];
C51 COMPILER V9.52.0.0   HAL_UART                                                          08/09/2019 21:23:34 PAGE 2   

  54   3                  uart_tx_rp = (uart_tx_rp + 1) % UART_NBUF;
  55   3              }
  56   2              uart_tx_cnt--;
  57   2          }
  58   1      }
  59          
  60          void hal_uart_init(hal_uart_baudrate_t baud) {
  61   1          uint16_t temp;
  62   1      
  63   1          ES0 = 0;                      // Disable UART0 interrupt while initializing
  64   1          uart_tx_wp = uart_tx_rp = 0;
  65   1          uart_tx_cnt = 0;
  66   1          uart_rx_wp = uart_rx_rp = 0;
  67   1          uart_rx_cnt = 0;
  68   1          REN0 = 1;                     // Enable receiver
  69   1          SM0 = 0;                      // Mode 1..
  70   1          SM1 = 1;                      // ..8 bit variable baud rate
  71   1          PCON |= 0x80;                 // SMOD = 1
  72   1          ADCON |= 0x80;                // Select internal baud rate generator
  73   1          switch(baud) {
  74   2          case UART_BAUD_57K6:
  75   2              temp = BAUD_57K6;
  76   2              break;
  77   2          case UART_BAUD_38K4:
  78   2              temp = BAUD_38K4;
  79   2              break;
  80   2          case UART_BAUD_9K6:
  81   2              temp = BAUD_9K6;
  82   2              break;
  83   2          case UART_BAUD_19K2:
  84   2          default:
  85   2              temp = BAUD_19K2;
  86   2              break;
  87   2          }
  88   1          S0RELL = (uint8_t)temp;
  89   1          S0RELH = (uint8_t)(temp >> 8);
  90   1      
  91   1          //TI0 = 0;
  92   1          // ES0 = 0;                      // Enable UART0 interrupt
  93   1      }
  94          
  95          void hal_uart_putchar(uint8_t ch) {
  96   1          // Wait until there is space in the TX buffer:
  97   1          while(uart_tx_cnt > UART_NBUF)
  98   1              ;
  99   1          ES0 = 0;
 100   1          if (uart_tx_cnt == 0) {
 101   2              S0BUF = ch;                 // Write first char directly to the UART SFR
 102   2          } else {
 103   2              uart_tx[uart_tx_wp] = ch;
 104   2              uart_tx_wp = (uart_tx_wp + 1) % UART_NBUF;
 105   2          }
 106   1          uart_tx_cnt++;
 107   1          ES0 = 1;
 108   1      }
 109          
 110          
 111          uint8_t hal_uart_chars_available(void) {
 112   1          return uart_rx_cnt;
 113   1      }
 114          
 115          bool hal_uart_tx_complete() {
C51 COMPILER V9.52.0.0   HAL_UART                                                          08/09/2019 21:23:34 PAGE 3   

 116   1          if(uart_tx_cnt == 0) {
 117   2              return true;
 118   2          } else {
 119   2              return false;
 120   2          }
 121   1      }
 122          uint8_t hal_uart_getchar(void) {
 123   1          uint8_t ch;
 124   1      
 125   1          // Wait until a character is available:
 126   1      
 127   1          while(uart_rx_cnt == 0)
 128   1          {}
 129   1          ES0 = 0;
 130   1          ch = uart_rx[uart_rx_rp];
 131   1          uart_rx_rp = (uart_rx_rp + 1) % UART_NBUF;
 132   1          uart_rx_cnt--;
 133   1          ES0 = 1;
 134   1          return ch;
 135   1      }
 136          
 137          /**
 138           * @}
 139           */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    267    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       5
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
